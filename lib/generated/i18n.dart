
import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

//This file is automatically generated. DO NOT EDIT, all your changes would be lost.

class S implements WidgetsLocalizations {
  const S();

  static const GeneratedLocalizationsDelegate delegate =
      const GeneratedLocalizationsDelegate();

  static S of(BuildContext context) =>
      Localizations.of<S>(context, WidgetsLocalizations);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get assign_to_me => "Assign to me";
  String get assignee => "Assignee";
  String get create => "Create";
  String get dark_mode => "Dark Mode";
  String get dashboard => "Dashboard";
  String get double_click_to_exit => "Double click to exit.";
  String get error_fetch_session => "Fail to sign in, make sure your hostname is correct please.";
  String get error_server => "Server error, please contact with administer of server.";
  String get error_server_timeout => "Time out, please contact with administer of server.";
  String get issue_assign_to_me => "Issue Assign To Me";
  String get issue_type => "Issue Type";
  String get language => "Language";
  String get login => "Sign in";
  String get logout => "Sign out";
  String get my_report_issue => "My Report Issue";
  String get my_unresolved_issue => "My Unresolved Issue";
  String get newIssue => "New Issue";
  String get no_data => "No Data";
  String get no_more_data => "No More Data";
  String get password => "Password";
  String get project => "Project";
  String get settings => "Settings";
  String get summary => "Summary";
  String get username => "Username";
  String get validator_hostname_regx => "Hostname must begin with http(s)://";
  String get validator_hostname_required => "Hostname is required";
  String get validator_password_required => "Password is required";
  String get validator_summary_required => "Summary is required";
  String get validator_username_required => "Username is required";
}

class en extends S {
  const en();
}

class zh_CN extends S {
  const zh_CN();

   @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get project => "项目";
  @override
  String get language => "语言";
  @override
  String get login => "登录";
  @override
  String get error_fetch_session => "登录失败，请确认服务器地址正确并重新尝试登录。";
  @override
  String get logout => "退出帐户";
  @override
  String get password => "密码";
  @override
  String get my_unresolved_issue => "我未解决的问题";
  @override
  String get validator_hostname_regx => "服务器地址必须以http(s)://开头";
  @override
  String get dark_mode => "夜间模式";
  @override
  String get issue_assign_to_me => "指派给我的问题";
  @override
  String get validator_username_required => "请填写密码";
  @override
  String get no_more_data => "没有更多数据";
  @override
  String get assign_to_me => "指派给我";
  @override
  String get create => "创建";
  @override
  String get validator_summary_required => "请填写概要";
  @override
  String get error_server => "服务器错误，请联系管理员。";
  @override
  String get dashboard => "仪表盘";
  @override
  String get summary => "概要";
  @override
  String get settings => "设置";
  @override
  String get issue_type => "问题类型";
  @override
  String get no_data => "暂无数据";
  @override
  String get double_click_to_exit => "双击返回退出应用";
  @override
  String get validator_password_required => "请填写密码";
  @override
  String get my_report_issue => "我报告的问题";
  @override
  String get newIssue => "创建问题";
  @override
  String get assignee => "经办人";
  @override
  String get username => "用户名";
  @override
  String get validator_hostname_required => "请填写服务器地址";
  @override
  String get error_server_timeout => "请求超时，请联系管理员。";
}


class GeneratedLocalizationsDelegate extends LocalizationsDelegate<WidgetsLocalizations> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[

      const Locale("en", ""),
      const Locale("zh", "CN"),

    ];
  }

  LocaleResolutionCallback resolution({Locale fallback}) {
    return (Locale locale, Iterable<Locale> supported) {
      final Locale languageLocale = new Locale(locale.languageCode, "");
      if (supported.contains(locale))
        return locale;
      else if (supported.contains(languageLocale))
        return languageLocale;
      else {
        final Locale fallbackLocale = fallback ?? supported.first;
        return fallbackLocale;
      }
    };
  }

  @override
  Future<WidgetsLocalizations> load(Locale locale) {
    final String lang = getLang(locale);
    switch (lang) {

      case "en":
        return new SynchronousFuture<WidgetsLocalizations>(const en());
      case "zh_CN":
        return new SynchronousFuture<WidgetsLocalizations>(const zh_CN());

      default:
        return new SynchronousFuture<WidgetsLocalizations>(const S());
    }
  }

  @override
  bool isSupported(Locale locale) => supportedLocales.contains(locale);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;
}

String getLang(Locale l) => l.countryCode != null && l.countryCode.isEmpty
    ? l.languageCode
    : l.toString();
